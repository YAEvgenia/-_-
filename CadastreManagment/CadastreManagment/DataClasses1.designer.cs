#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CadastreManagment
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="CadastreDB")]
	public partial class DataClasses1DataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Определения метода расширяемости
    partial void OnCreated();
    partial void InsertCadastralAgent(CadastralAgent instance);
    partial void UpdateCadastralAgent(CadastralAgent instance);
    partial void DeleteCadastralAgent(CadastralAgent instance);
    partial void InsertDirectory(Directory instance);
    partial void UpdateDirectory(Directory instance);
    partial void DeleteDirectory(Directory instance);
    partial void InsertLandRegistry(LandRegistry instance);
    partial void UpdateLandRegistry(LandRegistry instance);
    partial void DeleteLandRegistry(LandRegistry instance);
    partial void InsertMinerals(Minerals instance);
    partial void UpdateMinerals(Minerals instance);
    partial void DeleteMinerals(Minerals instance);
    partial void InsertRealEstateCadastre(RealEstateCadastre instance);
    partial void UpdateRealEstateCadastre(RealEstateCadastre instance);
    partial void DeleteRealEstateCadastre(RealEstateCadastre instance);
    partial void InsertWaterCadastre(WaterCadastre instance);
    partial void UpdateWaterCadastre(WaterCadastre instance);
    partial void DeleteWaterCadastre(WaterCadastre instance);
    partial void InsertAutorizedUser(AutorizedUser instance);
    partial void UpdateAutorizedUser(AutorizedUser instance);
    partial void DeleteAutorizedUser(AutorizedUser instance);
    partial void InsertStatementLand(StatementLand instance);
    partial void UpdateStatementLand(StatementLand instance);
    partial void DeleteStatementLand(StatementLand instance);
    partial void InsertStatementMinerals(StatementMinerals instance);
    partial void UpdateStatementMinerals(StatementMinerals instance);
    partial void DeleteStatementMinerals(StatementMinerals instance);
    partial void InsertTax(Tax instance);
    partial void UpdateTax(Tax instance);
    partial void DeleteTax(Tax instance);
    partial void InsertStatementWater(StatementWater instance);
    partial void UpdateStatementWater(StatementWater instance);
    partial void DeleteStatementWater(StatementWater instance);
    partial void InsertStatementRealEstate(StatementRealEstate instance);
    partial void UpdateStatementRealEstate(StatementRealEstate instance);
    partial void DeleteStatementRealEstate(StatementRealEstate instance);
    #endregion
		
		public DataClasses1DataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["CadastreDBConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<CadastralAgent> CadastralAgent
		{
			get
			{
				return this.GetTable<CadastralAgent>();
			}
		}
		
		public System.Data.Linq.Table<Directory> Directory
		{
			get
			{
				return this.GetTable<Directory>();
			}
		}
		
		public System.Data.Linq.Table<LandRegistry> LandRegistry
		{
			get
			{
				return this.GetTable<LandRegistry>();
			}
		}
		
		public System.Data.Linq.Table<Minerals> Minerals
		{
			get
			{
				return this.GetTable<Minerals>();
			}
		}
		
		public System.Data.Linq.Table<RealEstateCadastre> RealEstateCadastre
		{
			get
			{
				return this.GetTable<RealEstateCadastre>();
			}
		}
		
		public System.Data.Linq.Table<WaterCadastre> WaterCadastre
		{
			get
			{
				return this.GetTable<WaterCadastre>();
			}
		}
		
		public System.Data.Linq.Table<AutorizedUser> AutorizedUser
		{
			get
			{
				return this.GetTable<AutorizedUser>();
			}
		}
		
		public System.Data.Linq.Table<StatementLand> StatementLand
		{
			get
			{
				return this.GetTable<StatementLand>();
			}
		}
		
		public System.Data.Linq.Table<StatementMinerals> StatementMinerals
		{
			get
			{
				return this.GetTable<StatementMinerals>();
			}
		}
		
		public System.Data.Linq.Table<Tax> Tax
		{
			get
			{
				return this.GetTable<Tax>();
			}
		}
		
		public System.Data.Linq.Table<StatementWater> StatementWater
		{
			get
			{
				return this.GetTable<StatementWater>();
			}
		}
		
		public System.Data.Linq.Table<StatementRealEstate> StatementRealEstate
		{
			get
			{
				return this.GetTable<StatementRealEstate>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CadastralAgent")]
	public partial class CadastralAgent : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private string _Login;
		
		private string _Password;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnLoginChanging(string value);
    partial void OnLoginChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    #endregion
		
		public CadastralAgent()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Login", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Login
		{
			get
			{
				return this._Login;
			}
			set
			{
				if ((this._Login != value))
				{
					this.OnLoginChanging(value);
					this.SendPropertyChanging();
					this._Login = value;
					this.SendPropertyChanged("Login");
					this.OnLoginChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="NChar(10) NOT NULL", CanBeNull=false)]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Directory")]
	public partial class Directory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Type;
		
		private string _Notes;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTypeChanging(string value);
    partial void OnTypeChanged();
    partial void OnNotesChanging(string value);
    partial void OnNotesChanged();
    #endregion
		
		public Directory()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Notes", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Notes
		{
			get
			{
				return this._Notes;
			}
			set
			{
				if ((this._Notes != value))
				{
					this.OnNotesChanging(value);
					this.SendPropertyChanging();
					this._Notes = value;
					this.SendPropertyChanged("Notes");
					this.OnNotesChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.LandRegistry")]
	public partial class LandRegistry : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _Area;
		
		private string _Address;
		
		private int _Price;
		
		private System.DateTime _ApprovalDate;
		
		private string _Passport;
		
		private float _Tax_coefficint;
		
		private EntityRef<AutorizedUser> _AutorizedUser;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnAreaChanging(int value);
    partial void OnAreaChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnPriceChanging(int value);
    partial void OnPriceChanged();
    partial void OnApprovalDateChanging(System.DateTime value);
    partial void OnApprovalDateChanged();
    partial void OnPassportChanging(string value);
    partial void OnPassportChanged();
    partial void OnTax_coefficintChanging(float value);
    partial void OnTax_coefficintChanged();
    #endregion
		
		public LandRegistry()
		{
			this._AutorizedUser = default(EntityRef<AutorizedUser>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Area", DbType="Int NOT NULL")]
		public int Area
		{
			get
			{
				return this._Area;
			}
			set
			{
				if ((this._Area != value))
				{
					this.OnAreaChanging(value);
					this.SendPropertyChanging();
					this._Area = value;
					this.SendPropertyChanged("Area");
					this.OnAreaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Price", DbType="Int NOT NULL")]
		public int Price
		{
			get
			{
				return this._Price;
			}
			set
			{
				if ((this._Price != value))
				{
					this.OnPriceChanging(value);
					this.SendPropertyChanging();
					this._Price = value;
					this.SendPropertyChanged("Price");
					this.OnPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ApprovalDate", DbType="Date NOT NULL")]
		public System.DateTime ApprovalDate
		{
			get
			{
				return this._ApprovalDate;
			}
			set
			{
				if ((this._ApprovalDate != value))
				{
					this.OnApprovalDateChanging(value);
					this.SendPropertyChanging();
					this._ApprovalDate = value;
					this.SendPropertyChanged("ApprovalDate");
					this.OnApprovalDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Passport", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Passport
		{
			get
			{
				return this._Passport;
			}
			set
			{
				if ((this._Passport != value))
				{
					if (this._AutorizedUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPassportChanging(value);
					this.SendPropertyChanging();
					this._Passport = value;
					this.SendPropertyChanged("Passport");
					this.OnPassportChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Tax coefficint]", Storage="_Tax_coefficint", DbType="Real NOT NULL")]
		public float Tax_coefficint
		{
			get
			{
				return this._Tax_coefficint;
			}
			set
			{
				if ((this._Tax_coefficint != value))
				{
					this.OnTax_coefficintChanging(value);
					this.SendPropertyChanging();
					this._Tax_coefficint = value;
					this.SendPropertyChanged("Tax_coefficint");
					this.OnTax_coefficintChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AutorizedUser_LandRegistry", Storage="_AutorizedUser", ThisKey="Passport", OtherKey="Passport", IsForeignKey=true)]
		public AutorizedUser AutorizedUser
		{
			get
			{
				return this._AutorizedUser.Entity;
			}
			set
			{
				AutorizedUser previousValue = this._AutorizedUser.Entity;
				if (((previousValue != value) 
							|| (this._AutorizedUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AutorizedUser.Entity = null;
						previousValue.LandRegistry.Remove(this);
					}
					this._AutorizedUser.Entity = value;
					if ((value != null))
					{
						value.LandRegistry.Add(this);
						this._Passport = value.Passport;
					}
					else
					{
						this._Passport = default(string);
					}
					this.SendPropertyChanged("AutorizedUser");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Minerals")]
	public partial class Minerals : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Type;
		
		private string _Address;
		
		private int _Price;
		
		private System.DateTime _Approval_date;
		
		private string _Passport;
		
		private System.Nullable<int> _Amount;
		
		private float _Tax_coefficint;
		
		private EntityRef<AutorizedUser> _AutorizedUser;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnTypeChanging(string value);
    partial void OnTypeChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnPriceChanging(int value);
    partial void OnPriceChanged();
    partial void OnApproval_dateChanging(System.DateTime value);
    partial void OnApproval_dateChanged();
    partial void OnPassportChanging(string value);
    partial void OnPassportChanged();
    partial void OnAmountChanging(System.Nullable<int> value);
    partial void OnAmountChanged();
    partial void OnTax_coefficintChanging(float value);
    partial void OnTax_coefficintChanged();
    #endregion
		
		public Minerals()
		{
			this._AutorizedUser = default(EntityRef<AutorizedUser>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Price", DbType="Int NOT NULL")]
		public int Price
		{
			get
			{
				return this._Price;
			}
			set
			{
				if ((this._Price != value))
				{
					this.OnPriceChanging(value);
					this.SendPropertyChanging();
					this._Price = value;
					this.SendPropertyChanged("Price");
					this.OnPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Approval date]", Storage="_Approval_date", DbType="Date NOT NULL")]
		public System.DateTime Approval_date
		{
			get
			{
				return this._Approval_date;
			}
			set
			{
				if ((this._Approval_date != value))
				{
					this.OnApproval_dateChanging(value);
					this.SendPropertyChanging();
					this._Approval_date = value;
					this.SendPropertyChanged("Approval_date");
					this.OnApproval_dateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Passport", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Passport
		{
			get
			{
				return this._Passport;
			}
			set
			{
				if ((this._Passport != value))
				{
					if (this._AutorizedUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPassportChanging(value);
					this.SendPropertyChanging();
					this._Passport = value;
					this.SendPropertyChanged("Passport");
					this.OnPassportChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Amount", DbType="Int")]
		public System.Nullable<int> Amount
		{
			get
			{
				return this._Amount;
			}
			set
			{
				if ((this._Amount != value))
				{
					this.OnAmountChanging(value);
					this.SendPropertyChanging();
					this._Amount = value;
					this.SendPropertyChanged("Amount");
					this.OnAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Tax coefficint]", Storage="_Tax_coefficint", DbType="Real NOT NULL")]
		public float Tax_coefficint
		{
			get
			{
				return this._Tax_coefficint;
			}
			set
			{
				if ((this._Tax_coefficint != value))
				{
					this.OnTax_coefficintChanging(value);
					this.SendPropertyChanging();
					this._Tax_coefficint = value;
					this.SendPropertyChanged("Tax_coefficint");
					this.OnTax_coefficintChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AutorizedUser_Minerals", Storage="_AutorizedUser", ThisKey="Passport", OtherKey="Passport", IsForeignKey=true)]
		public AutorizedUser AutorizedUser
		{
			get
			{
				return this._AutorizedUser.Entity;
			}
			set
			{
				AutorizedUser previousValue = this._AutorizedUser.Entity;
				if (((previousValue != value) 
							|| (this._AutorizedUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AutorizedUser.Entity = null;
						previousValue.Minerals.Remove(this);
					}
					this._AutorizedUser.Entity = value;
					if ((value != null))
					{
						value.Minerals.Add(this);
						this._Passport = value.Passport;
					}
					else
					{
						this._Passport = default(string);
					}
					this.SendPropertyChanged("AutorizedUser");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.RealEstateCadastre")]
	public partial class RealEstateCadastre : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Type;
		
		private int _Area;
		
		private string _Address;
		
		private System.DateTime _Approval_Date;
		
		private string _Passport;
		
		private string _Readiness;
		
		private string _Appointment;
		
		private System.Nullable<int> _Floors;
		
		private System.Nullable<float> _Tax_coefficint;
		
		private string _Notes;
		
		private EntityRef<AutorizedUser> _AutorizedUser;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnTypeChanging(string value);
    partial void OnTypeChanged();
    partial void OnAreaChanging(int value);
    partial void OnAreaChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnApproval_DateChanging(System.DateTime value);
    partial void OnApproval_DateChanged();
    partial void OnPassportChanging(string value);
    partial void OnPassportChanged();
    partial void OnReadinessChanging(string value);
    partial void OnReadinessChanged();
    partial void OnAppointmentChanging(string value);
    partial void OnAppointmentChanged();
    partial void OnFloorsChanging(System.Nullable<int> value);
    partial void OnFloorsChanged();
    partial void OnTax_coefficintChanging(System.Nullable<float> value);
    partial void OnTax_coefficintChanged();
    partial void OnNotesChanging(string value);
    partial void OnNotesChanged();
    #endregion
		
		public RealEstateCadastre()
		{
			this._AutorizedUser = default(EntityRef<AutorizedUser>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Area", DbType="Int NOT NULL")]
		public int Area
		{
			get
			{
				return this._Area;
			}
			set
			{
				if ((this._Area != value))
				{
					this.OnAreaChanging(value);
					this.SendPropertyChanging();
					this._Area = value;
					this.SendPropertyChanged("Area");
					this.OnAreaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Approval Date]", Storage="_Approval_Date", DbType="Date NOT NULL")]
		public System.DateTime Approval_Date
		{
			get
			{
				return this._Approval_Date;
			}
			set
			{
				if ((this._Approval_Date != value))
				{
					this.OnApproval_DateChanging(value);
					this.SendPropertyChanging();
					this._Approval_Date = value;
					this.SendPropertyChanged("Approval_Date");
					this.OnApproval_DateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Passport", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Passport
		{
			get
			{
				return this._Passport;
			}
			set
			{
				if ((this._Passport != value))
				{
					if (this._AutorizedUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPassportChanging(value);
					this.SendPropertyChanging();
					this._Passport = value;
					this.SendPropertyChanged("Passport");
					this.OnPassportChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Readiness", DbType="NVarChar(50)")]
		public string Readiness
		{
			get
			{
				return this._Readiness;
			}
			set
			{
				if ((this._Readiness != value))
				{
					this.OnReadinessChanging(value);
					this.SendPropertyChanging();
					this._Readiness = value;
					this.SendPropertyChanged("Readiness");
					this.OnReadinessChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Appointment", DbType="NVarChar(50)")]
		public string Appointment
		{
			get
			{
				return this._Appointment;
			}
			set
			{
				if ((this._Appointment != value))
				{
					this.OnAppointmentChanging(value);
					this.SendPropertyChanging();
					this._Appointment = value;
					this.SendPropertyChanged("Appointment");
					this.OnAppointmentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Floors", DbType="Int")]
		public System.Nullable<int> Floors
		{
			get
			{
				return this._Floors;
			}
			set
			{
				if ((this._Floors != value))
				{
					this.OnFloorsChanging(value);
					this.SendPropertyChanging();
					this._Floors = value;
					this.SendPropertyChanged("Floors");
					this.OnFloorsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Tax coefficint]", Storage="_Tax_coefficint", DbType="Real")]
		public System.Nullable<float> Tax_coefficint
		{
			get
			{
				return this._Tax_coefficint;
			}
			set
			{
				if ((this._Tax_coefficint != value))
				{
					this.OnTax_coefficintChanging(value);
					this.SendPropertyChanging();
					this._Tax_coefficint = value;
					this.SendPropertyChanged("Tax_coefficint");
					this.OnTax_coefficintChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Notes", DbType="NVarChar(MAX)")]
		public string Notes
		{
			get
			{
				return this._Notes;
			}
			set
			{
				if ((this._Notes != value))
				{
					this.OnNotesChanging(value);
					this.SendPropertyChanging();
					this._Notes = value;
					this.SendPropertyChanged("Notes");
					this.OnNotesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AutorizedUser_RealEstateCadastre", Storage="_AutorizedUser", ThisKey="Passport", OtherKey="Passport", IsForeignKey=true)]
		public AutorizedUser AutorizedUser
		{
			get
			{
				return this._AutorizedUser.Entity;
			}
			set
			{
				AutorizedUser previousValue = this._AutorizedUser.Entity;
				if (((previousValue != value) 
							|| (this._AutorizedUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AutorizedUser.Entity = null;
						previousValue.RealEstateCadastre.Remove(this);
					}
					this._AutorizedUser.Entity = value;
					if ((value != null))
					{
						value.RealEstateCadastre.Add(this);
						this._Passport = value.Passport;
					}
					else
					{
						this._Passport = default(string);
					}
					this.SendPropertyChanged("AutorizedUser");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.WaterCadastre")]
	public partial class WaterCadastre : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _Area;
		
		private string _Address;
		
		private string _Type;
		
		private System.DateTime _Approval_date;
		
		private string _Passport;
		
		private float _Tax_coefficint;
		
		private string _Water_quality;
		
		private string _Water_management_facilities;
		
		private EntityRef<AutorizedUser> _AutorizedUser;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnAreaChanging(int value);
    partial void OnAreaChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnTypeChanging(string value);
    partial void OnTypeChanged();
    partial void OnApproval_dateChanging(System.DateTime value);
    partial void OnApproval_dateChanged();
    partial void OnPassportChanging(string value);
    partial void OnPassportChanged();
    partial void OnTax_coefficintChanging(float value);
    partial void OnTax_coefficintChanged();
    partial void OnWater_qualityChanging(string value);
    partial void OnWater_qualityChanged();
    partial void OnWater_management_facilitiesChanging(string value);
    partial void OnWater_management_facilitiesChanged();
    #endregion
		
		public WaterCadastre()
		{
			this._AutorizedUser = default(EntityRef<AutorizedUser>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Area", DbType="Int NOT NULL")]
		public int Area
		{
			get
			{
				return this._Area;
			}
			set
			{
				if ((this._Area != value))
				{
					this.OnAreaChanging(value);
					this.SendPropertyChanging();
					this._Area = value;
					this.SendPropertyChanged("Area");
					this.OnAreaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Approval date]", Storage="_Approval_date", DbType="Date NOT NULL")]
		public System.DateTime Approval_date
		{
			get
			{
				return this._Approval_date;
			}
			set
			{
				if ((this._Approval_date != value))
				{
					this.OnApproval_dateChanging(value);
					this.SendPropertyChanging();
					this._Approval_date = value;
					this.SendPropertyChanged("Approval_date");
					this.OnApproval_dateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Passport", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Passport
		{
			get
			{
				return this._Passport;
			}
			set
			{
				if ((this._Passport != value))
				{
					if (this._AutorizedUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPassportChanging(value);
					this.SendPropertyChanging();
					this._Passport = value;
					this.SendPropertyChanged("Passport");
					this.OnPassportChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Tax coefficint]", Storage="_Tax_coefficint", DbType="Real NOT NULL")]
		public float Tax_coefficint
		{
			get
			{
				return this._Tax_coefficint;
			}
			set
			{
				if ((this._Tax_coefficint != value))
				{
					this.OnTax_coefficintChanging(value);
					this.SendPropertyChanging();
					this._Tax_coefficint = value;
					this.SendPropertyChanged("Tax_coefficint");
					this.OnTax_coefficintChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Water quality]", Storage="_Water_quality", DbType="NVarChar(50)")]
		public string Water_quality
		{
			get
			{
				return this._Water_quality;
			}
			set
			{
				if ((this._Water_quality != value))
				{
					this.OnWater_qualityChanging(value);
					this.SendPropertyChanging();
					this._Water_quality = value;
					this.SendPropertyChanged("Water_quality");
					this.OnWater_qualityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Water management facilities]", Storage="_Water_management_facilities", DbType="NVarChar(MAX)")]
		public string Water_management_facilities
		{
			get
			{
				return this._Water_management_facilities;
			}
			set
			{
				if ((this._Water_management_facilities != value))
				{
					this.OnWater_management_facilitiesChanging(value);
					this.SendPropertyChanging();
					this._Water_management_facilities = value;
					this.SendPropertyChanged("Water_management_facilities");
					this.OnWater_management_facilitiesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AutorizedUser_WaterCadastre", Storage="_AutorizedUser", ThisKey="Passport", OtherKey="Passport", IsForeignKey=true)]
		public AutorizedUser AutorizedUser
		{
			get
			{
				return this._AutorizedUser.Entity;
			}
			set
			{
				AutorizedUser previousValue = this._AutorizedUser.Entity;
				if (((previousValue != value) 
							|| (this._AutorizedUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AutorizedUser.Entity = null;
						previousValue.WaterCadastre.Remove(this);
					}
					this._AutorizedUser.Entity = value;
					if ((value != null))
					{
						value.WaterCadastre.Add(this);
						this._Passport = value.Passport;
					}
					else
					{
						this._Passport = default(string);
					}
					this.SendPropertyChanged("AutorizedUser");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AutorizedUser")]
	public partial class AutorizedUser : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Passport;
		
		private string _Name;
		
		private string _Password;
		
		private EntitySet<LandRegistry> _LandRegistry;
		
		private EntitySet<Minerals> _Minerals;
		
		private EntitySet<RealEstateCadastre> _RealEstateCadastre;
		
		private EntitySet<WaterCadastre> _WaterCadastre;
		
		private EntitySet<StatementLand> _StatementLand;
		
		private EntitySet<StatementMinerals> _StatementMinerals;
		
		private EntitySet<StatementWater> _StatementWater;
		
		private EntitySet<StatementRealEstate> _StatementRealEstate;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPassportChanging(string value);
    partial void OnPassportChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    #endregion
		
		public AutorizedUser()
		{
			this._LandRegistry = new EntitySet<LandRegistry>(new Action<LandRegistry>(this.attach_LandRegistry), new Action<LandRegistry>(this.detach_LandRegistry));
			this._Minerals = new EntitySet<Minerals>(new Action<Minerals>(this.attach_Minerals), new Action<Minerals>(this.detach_Minerals));
			this._RealEstateCadastre = new EntitySet<RealEstateCadastre>(new Action<RealEstateCadastre>(this.attach_RealEstateCadastre), new Action<RealEstateCadastre>(this.detach_RealEstateCadastre));
			this._WaterCadastre = new EntitySet<WaterCadastre>(new Action<WaterCadastre>(this.attach_WaterCadastre), new Action<WaterCadastre>(this.detach_WaterCadastre));
			this._StatementLand = new EntitySet<StatementLand>(new Action<StatementLand>(this.attach_StatementLand), new Action<StatementLand>(this.detach_StatementLand));
			this._StatementMinerals = new EntitySet<StatementMinerals>(new Action<StatementMinerals>(this.attach_StatementMinerals), new Action<StatementMinerals>(this.detach_StatementMinerals));
			this._StatementWater = new EntitySet<StatementWater>(new Action<StatementWater>(this.attach_StatementWater), new Action<StatementWater>(this.detach_StatementWater));
			this._StatementRealEstate = new EntitySet<StatementRealEstate>(new Action<StatementRealEstate>(this.attach_StatementRealEstate), new Action<StatementRealEstate>(this.detach_StatementRealEstate));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Passport", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Passport
		{
			get
			{
				return this._Passport;
			}
			set
			{
				if ((this._Passport != value))
				{
					this.OnPassportChanging(value);
					this.SendPropertyChanging();
					this._Passport = value;
					this.SendPropertyChanged("Passport");
					this.OnPassportChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AutorizedUser_LandRegistry", Storage="_LandRegistry", ThisKey="Passport", OtherKey="Passport")]
		public EntitySet<LandRegistry> LandRegistry
		{
			get
			{
				return this._LandRegistry;
			}
			set
			{
				this._LandRegistry.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AutorizedUser_Minerals", Storage="_Minerals", ThisKey="Passport", OtherKey="Passport")]
		public EntitySet<Minerals> Minerals
		{
			get
			{
				return this._Minerals;
			}
			set
			{
				this._Minerals.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AutorizedUser_RealEstateCadastre", Storage="_RealEstateCadastre", ThisKey="Passport", OtherKey="Passport")]
		public EntitySet<RealEstateCadastre> RealEstateCadastre
		{
			get
			{
				return this._RealEstateCadastre;
			}
			set
			{
				this._RealEstateCadastre.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AutorizedUser_WaterCadastre", Storage="_WaterCadastre", ThisKey="Passport", OtherKey="Passport")]
		public EntitySet<WaterCadastre> WaterCadastre
		{
			get
			{
				return this._WaterCadastre;
			}
			set
			{
				this._WaterCadastre.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AutorizedUser_StatementLand", Storage="_StatementLand", ThisKey="Passport", OtherKey="Passport")]
		public EntitySet<StatementLand> StatementLand
		{
			get
			{
				return this._StatementLand;
			}
			set
			{
				this._StatementLand.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AutorizedUser_StatementMinerals", Storage="_StatementMinerals", ThisKey="Passport", OtherKey="Passport")]
		public EntitySet<StatementMinerals> StatementMinerals
		{
			get
			{
				return this._StatementMinerals;
			}
			set
			{
				this._StatementMinerals.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AutorizedUser_StatementWater", Storage="_StatementWater", ThisKey="Passport", OtherKey="Passport")]
		public EntitySet<StatementWater> StatementWater
		{
			get
			{
				return this._StatementWater;
			}
			set
			{
				this._StatementWater.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AutorizedUser_StatementRealEstate", Storage="_StatementRealEstate", ThisKey="Passport", OtherKey="Passport")]
		public EntitySet<StatementRealEstate> StatementRealEstate
		{
			get
			{
				return this._StatementRealEstate;
			}
			set
			{
				this._StatementRealEstate.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_LandRegistry(LandRegistry entity)
		{
			this.SendPropertyChanging();
			entity.AutorizedUser = this;
		}
		
		private void detach_LandRegistry(LandRegistry entity)
		{
			this.SendPropertyChanging();
			entity.AutorizedUser = null;
		}
		
		private void attach_Minerals(Minerals entity)
		{
			this.SendPropertyChanging();
			entity.AutorizedUser = this;
		}
		
		private void detach_Minerals(Minerals entity)
		{
			this.SendPropertyChanging();
			entity.AutorizedUser = null;
		}
		
		private void attach_RealEstateCadastre(RealEstateCadastre entity)
		{
			this.SendPropertyChanging();
			entity.AutorizedUser = this;
		}
		
		private void detach_RealEstateCadastre(RealEstateCadastre entity)
		{
			this.SendPropertyChanging();
			entity.AutorizedUser = null;
		}
		
		private void attach_WaterCadastre(WaterCadastre entity)
		{
			this.SendPropertyChanging();
			entity.AutorizedUser = this;
		}
		
		private void detach_WaterCadastre(WaterCadastre entity)
		{
			this.SendPropertyChanging();
			entity.AutorizedUser = null;
		}
		
		private void attach_StatementLand(StatementLand entity)
		{
			this.SendPropertyChanging();
			entity.AutorizedUser = this;
		}
		
		private void detach_StatementLand(StatementLand entity)
		{
			this.SendPropertyChanging();
			entity.AutorizedUser = null;
		}
		
		private void attach_StatementMinerals(StatementMinerals entity)
		{
			this.SendPropertyChanging();
			entity.AutorizedUser = this;
		}
		
		private void detach_StatementMinerals(StatementMinerals entity)
		{
			this.SendPropertyChanging();
			entity.AutorizedUser = null;
		}
		
		private void attach_StatementWater(StatementWater entity)
		{
			this.SendPropertyChanging();
			entity.AutorizedUser = this;
		}
		
		private void detach_StatementWater(StatementWater entity)
		{
			this.SendPropertyChanging();
			entity.AutorizedUser = null;
		}
		
		private void attach_StatementRealEstate(StatementRealEstate entity)
		{
			this.SendPropertyChanging();
			entity.AutorizedUser = this;
		}
		
		private void detach_StatementRealEstate(StatementRealEstate entity)
		{
			this.SendPropertyChanging();
			entity.AutorizedUser = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.StatementLand")]
	public partial class StatementLand : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Status;
		
		private int _Area;
		
		private string _Address;
		
		private int _Price;
		
		private string _Passport;
		
		private EntityRef<AutorizedUser> _AutorizedUser;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnStatusChanging(string value);
    partial void OnStatusChanged();
    partial void OnAreaChanging(int value);
    partial void OnAreaChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnPriceChanging(int value);
    partial void OnPriceChanged();
    partial void OnPassportChanging(string value);
    partial void OnPassportChanged();
    #endregion
		
		public StatementLand()
		{
			this._AutorizedUser = default(EntityRef<AutorizedUser>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Area", DbType="Int NOT NULL")]
		public int Area
		{
			get
			{
				return this._Area;
			}
			set
			{
				if ((this._Area != value))
				{
					this.OnAreaChanging(value);
					this.SendPropertyChanging();
					this._Area = value;
					this.SendPropertyChanged("Area");
					this.OnAreaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Price", DbType="Int NOT NULL")]
		public int Price
		{
			get
			{
				return this._Price;
			}
			set
			{
				if ((this._Price != value))
				{
					this.OnPriceChanging(value);
					this.SendPropertyChanging();
					this._Price = value;
					this.SendPropertyChanged("Price");
					this.OnPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Passport", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Passport
		{
			get
			{
				return this._Passport;
			}
			set
			{
				if ((this._Passport != value))
				{
					if (this._AutorizedUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPassportChanging(value);
					this.SendPropertyChanging();
					this._Passport = value;
					this.SendPropertyChanged("Passport");
					this.OnPassportChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AutorizedUser_StatementLand", Storage="_AutorizedUser", ThisKey="Passport", OtherKey="Passport", IsForeignKey=true)]
		public AutorizedUser AutorizedUser
		{
			get
			{
				return this._AutorizedUser.Entity;
			}
			set
			{
				AutorizedUser previousValue = this._AutorizedUser.Entity;
				if (((previousValue != value) 
							|| (this._AutorizedUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AutorizedUser.Entity = null;
						previousValue.StatementLand.Remove(this);
					}
					this._AutorizedUser.Entity = value;
					if ((value != null))
					{
						value.StatementLand.Add(this);
						this._Passport = value.Passport;
					}
					else
					{
						this._Passport = default(string);
					}
					this.SendPropertyChanged("AutorizedUser");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.StatementMinerals")]
	public partial class StatementMinerals : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Status;
		
		private string _Type;
		
		private string _Address;
		
		private int _Price;
		
		private string _Passport;
		
		private int _Amount;
		
		private EntityRef<AutorizedUser> _AutorizedUser;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnStatusChanging(string value);
    partial void OnStatusChanged();
    partial void OnTypeChanging(string value);
    partial void OnTypeChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnPriceChanging(int value);
    partial void OnPriceChanged();
    partial void OnPassportChanging(string value);
    partial void OnPassportChanged();
    partial void OnAmountChanging(int value);
    partial void OnAmountChanged();
    #endregion
		
		public StatementMinerals()
		{
			this._AutorizedUser = default(EntityRef<AutorizedUser>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Price", DbType="Int NOT NULL")]
		public int Price
		{
			get
			{
				return this._Price;
			}
			set
			{
				if ((this._Price != value))
				{
					this.OnPriceChanging(value);
					this.SendPropertyChanging();
					this._Price = value;
					this.SendPropertyChanged("Price");
					this.OnPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Passport", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Passport
		{
			get
			{
				return this._Passport;
			}
			set
			{
				if ((this._Passport != value))
				{
					if (this._AutorizedUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPassportChanging(value);
					this.SendPropertyChanging();
					this._Passport = value;
					this.SendPropertyChanged("Passport");
					this.OnPassportChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Amount", DbType="Int NOT NULL")]
		public int Amount
		{
			get
			{
				return this._Amount;
			}
			set
			{
				if ((this._Amount != value))
				{
					this.OnAmountChanging(value);
					this.SendPropertyChanging();
					this._Amount = value;
					this.SendPropertyChanged("Amount");
					this.OnAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AutorizedUser_StatementMinerals", Storage="_AutorizedUser", ThisKey="Passport", OtherKey="Passport", IsForeignKey=true)]
		public AutorizedUser AutorizedUser
		{
			get
			{
				return this._AutorizedUser.Entity;
			}
			set
			{
				AutorizedUser previousValue = this._AutorizedUser.Entity;
				if (((previousValue != value) 
							|| (this._AutorizedUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AutorizedUser.Entity = null;
						previousValue.StatementMinerals.Remove(this);
					}
					this._AutorizedUser.Entity = value;
					if ((value != null))
					{
						value.StatementMinerals.Add(this);
						this._Passport = value.Passport;
					}
					else
					{
						this._Passport = default(string);
					}
					this.SendPropertyChanged("AutorizedUser");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Tax")]
	public partial class Tax : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private float _Price;
		
		private System.DateTime _Date_of_creation;
		
		private System.Nullable<System.DateTime> _Payment_date;
		
		private string _Cadastre_type;
		
		private int _Cadastre_id;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnPriceChanging(float value);
    partial void OnPriceChanged();
    partial void OnDate_of_creationChanging(System.DateTime value);
    partial void OnDate_of_creationChanged();
    partial void OnPayment_dateChanging(System.Nullable<System.DateTime> value);
    partial void OnPayment_dateChanged();
    partial void OnCadastre_typeChanging(string value);
    partial void OnCadastre_typeChanged();
    partial void OnCadastre_idChanging(int value);
    partial void OnCadastre_idChanged();
    #endregion
		
		public Tax()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Price", DbType="Real NOT NULL")]
		public float Price
		{
			get
			{
				return this._Price;
			}
			set
			{
				if ((this._Price != value))
				{
					this.OnPriceChanging(value);
					this.SendPropertyChanging();
					this._Price = value;
					this.SendPropertyChanged("Price");
					this.OnPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Date of creation]", Storage="_Date_of_creation", DbType="Date NOT NULL")]
		public System.DateTime Date_of_creation
		{
			get
			{
				return this._Date_of_creation;
			}
			set
			{
				if ((this._Date_of_creation != value))
				{
					this.OnDate_of_creationChanging(value);
					this.SendPropertyChanging();
					this._Date_of_creation = value;
					this.SendPropertyChanged("Date_of_creation");
					this.OnDate_of_creationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Payment date]", Storage="_Payment_date", DbType="Date")]
		public System.Nullable<System.DateTime> Payment_date
		{
			get
			{
				return this._Payment_date;
			}
			set
			{
				if ((this._Payment_date != value))
				{
					this.OnPayment_dateChanging(value);
					this.SendPropertyChanging();
					this._Payment_date = value;
					this.SendPropertyChanged("Payment_date");
					this.OnPayment_dateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Cadastre type]", Storage="_Cadastre_type", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Cadastre_type
		{
			get
			{
				return this._Cadastre_type;
			}
			set
			{
				if ((this._Cadastre_type != value))
				{
					this.OnCadastre_typeChanging(value);
					this.SendPropertyChanging();
					this._Cadastre_type = value;
					this.SendPropertyChanged("Cadastre_type");
					this.OnCadastre_typeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Cadastre id]", Storage="_Cadastre_id", DbType="Int NOT NULL")]
		public int Cadastre_id
		{
			get
			{
				return this._Cadastre_id;
			}
			set
			{
				if ((this._Cadastre_id != value))
				{
					this.OnCadastre_idChanging(value);
					this.SendPropertyChanging();
					this._Cadastre_id = value;
					this.SendPropertyChanged("Cadastre_id");
					this.OnCadastre_idChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.StatementWater")]
	public partial class StatementWater : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Status;
		
		private int _Area;
		
		private string _Address;
		
		private string _Type;
		
		private string _Passport;
		
		private string _Water_quality;
		
		private string _Water_management_facilities;
		
		private EntityRef<AutorizedUser> _AutorizedUser;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnStatusChanging(string value);
    partial void OnStatusChanged();
    partial void OnAreaChanging(int value);
    partial void OnAreaChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnTypeChanging(string value);
    partial void OnTypeChanged();
    partial void OnPassportChanging(string value);
    partial void OnPassportChanged();
    partial void OnWater_qualityChanging(string value);
    partial void OnWater_qualityChanged();
    partial void OnWater_management_facilitiesChanging(string value);
    partial void OnWater_management_facilitiesChanged();
    #endregion
		
		public StatementWater()
		{
			this._AutorizedUser = default(EntityRef<AutorizedUser>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Area", DbType="Int NOT NULL")]
		public int Area
		{
			get
			{
				return this._Area;
			}
			set
			{
				if ((this._Area != value))
				{
					this.OnAreaChanging(value);
					this.SendPropertyChanging();
					this._Area = value;
					this.SendPropertyChanged("Area");
					this.OnAreaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Passport", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Passport
		{
			get
			{
				return this._Passport;
			}
			set
			{
				if ((this._Passport != value))
				{
					if (this._AutorizedUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPassportChanging(value);
					this.SendPropertyChanging();
					this._Passport = value;
					this.SendPropertyChanged("Passport");
					this.OnPassportChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Water quality]", Storage="_Water_quality", DbType="NVarChar(50)")]
		public string Water_quality
		{
			get
			{
				return this._Water_quality;
			}
			set
			{
				if ((this._Water_quality != value))
				{
					this.OnWater_qualityChanging(value);
					this.SendPropertyChanging();
					this._Water_quality = value;
					this.SendPropertyChanged("Water_quality");
					this.OnWater_qualityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Water management facilities]", Storage="_Water_management_facilities", DbType="NVarChar(MAX)")]
		public string Water_management_facilities
		{
			get
			{
				return this._Water_management_facilities;
			}
			set
			{
				if ((this._Water_management_facilities != value))
				{
					this.OnWater_management_facilitiesChanging(value);
					this.SendPropertyChanging();
					this._Water_management_facilities = value;
					this.SendPropertyChanged("Water_management_facilities");
					this.OnWater_management_facilitiesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AutorizedUser_StatementWater", Storage="_AutorizedUser", ThisKey="Passport", OtherKey="Passport", IsForeignKey=true)]
		public AutorizedUser AutorizedUser
		{
			get
			{
				return this._AutorizedUser.Entity;
			}
			set
			{
				AutorizedUser previousValue = this._AutorizedUser.Entity;
				if (((previousValue != value) 
							|| (this._AutorizedUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AutorizedUser.Entity = null;
						previousValue.StatementWater.Remove(this);
					}
					this._AutorizedUser.Entity = value;
					if ((value != null))
					{
						value.StatementWater.Add(this);
						this._Passport = value.Passport;
					}
					else
					{
						this._Passport = default(string);
					}
					this.SendPropertyChanged("AutorizedUser");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.StatementRealEstate")]
	public partial class StatementRealEstate : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Status;
		
		private string _Type;
		
		private int _Area;
		
		private string _Address;
		
		private string _Passport;
		
		private string _Readiness;
		
		private string _Appointment;
		
		private System.Nullable<int> _Floors;
		
		private EntityRef<AutorizedUser> _AutorizedUser;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnStatusChanging(string value);
    partial void OnStatusChanged();
    partial void OnTypeChanging(string value);
    partial void OnTypeChanged();
    partial void OnAreaChanging(int value);
    partial void OnAreaChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnPassportChanging(string value);
    partial void OnPassportChanged();
    partial void OnReadinessChanging(string value);
    partial void OnReadinessChanged();
    partial void OnAppointmentChanging(string value);
    partial void OnAppointmentChanged();
    partial void OnFloorsChanging(System.Nullable<int> value);
    partial void OnFloorsChanged();
    #endregion
		
		public StatementRealEstate()
		{
			this._AutorizedUser = default(EntityRef<AutorizedUser>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Area", DbType="Int NOT NULL")]
		public int Area
		{
			get
			{
				return this._Area;
			}
			set
			{
				if ((this._Area != value))
				{
					this.OnAreaChanging(value);
					this.SendPropertyChanging();
					this._Area = value;
					this.SendPropertyChanged("Area");
					this.OnAreaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Passport", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Passport
		{
			get
			{
				return this._Passport;
			}
			set
			{
				if ((this._Passport != value))
				{
					if (this._AutorizedUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPassportChanging(value);
					this.SendPropertyChanging();
					this._Passport = value;
					this.SendPropertyChanged("Passport");
					this.OnPassportChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Readiness", DbType="NVarChar(50)")]
		public string Readiness
		{
			get
			{
				return this._Readiness;
			}
			set
			{
				if ((this._Readiness != value))
				{
					this.OnReadinessChanging(value);
					this.SendPropertyChanging();
					this._Readiness = value;
					this.SendPropertyChanged("Readiness");
					this.OnReadinessChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Appointment", DbType="NVarChar(50)")]
		public string Appointment
		{
			get
			{
				return this._Appointment;
			}
			set
			{
				if ((this._Appointment != value))
				{
					this.OnAppointmentChanging(value);
					this.SendPropertyChanging();
					this._Appointment = value;
					this.SendPropertyChanged("Appointment");
					this.OnAppointmentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Floors", DbType="Int")]
		public System.Nullable<int> Floors
		{
			get
			{
				return this._Floors;
			}
			set
			{
				if ((this._Floors != value))
				{
					this.OnFloorsChanging(value);
					this.SendPropertyChanging();
					this._Floors = value;
					this.SendPropertyChanged("Floors");
					this.OnFloorsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AutorizedUser_StatementRealEstate", Storage="_AutorizedUser", ThisKey="Passport", OtherKey="Passport", IsForeignKey=true)]
		public AutorizedUser AutorizedUser
		{
			get
			{
				return this._AutorizedUser.Entity;
			}
			set
			{
				AutorizedUser previousValue = this._AutorizedUser.Entity;
				if (((previousValue != value) 
							|| (this._AutorizedUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AutorizedUser.Entity = null;
						previousValue.StatementRealEstate.Remove(this);
					}
					this._AutorizedUser.Entity = value;
					if ((value != null))
					{
						value.StatementRealEstate.Add(this);
						this._Passport = value.Passport;
					}
					else
					{
						this._Passport = default(string);
					}
					this.SendPropertyChanged("AutorizedUser");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
